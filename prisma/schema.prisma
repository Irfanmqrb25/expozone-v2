generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id                    String                 @id @default(uuid())
  name                  String?
  image                 String?
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  favoriteIds String[]

  accounts Account[]
  stores   Store[]
  orders   Order[]
  Reviews  Review[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerficationToken {
  id           String   @id @default(uuid())
  currentEmail String
  newEmail     String?
  token        String   @unique
  expires      DateTime

  @@unique([currentEmail, newEmail, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(uuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Store {
  id          String   @id @default(uuid())
  userId      String
  image       String?
  name        String   @unique
  email       String
  country     String
  address     String
  city        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  products  Product[]
  OrderItem OrderItem[]

  @@unique([userId])
}

model Product {
  id          String   @id @default(uuid())
  name        String
  images      String[]
  category    String
  description String
  price       Decimal
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  productAssets ProductAsset[]
  orderItems    OrderItem[]
  reviews       Review[]
}

model ProductAsset {
  id   String  @id @default(uuid())
  name String?
  url  String
  size Int?

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

enum TRANSACTION_STATUS {
  PENDING
  PAID
  CANCELED
}

model Order {
  id         String             @id @unique
  totalPrice Decimal
  status     TRANSACTION_STATUS
  token      String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderItems OrderItem[]
}

model OrderItem {
  id        String   @id @unique
  createdAt DateTime @default(now())

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  storeId   String
  store     Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
}

model Review {
  id        String  @id @default(uuid())
  message   String
  createdAt DateTime @default(now())

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}