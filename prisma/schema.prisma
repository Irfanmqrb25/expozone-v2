// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id                    String                 @id @default(uuid())
  name                  String?
  image                 String?
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  favoriteIds String[]

  accounts Account[]
  stores   Store[]
  orders   Order[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerficationToken {
  id           String   @id @default(uuid())
  currentEmail String
  newEmail     String?
  token        String   @unique
  expires      DateTime

  @@unique([currentEmail, newEmail, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(uuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Store {
  id          String   @id @default(uuid())
  userId      String
  image       String?
  name        String
  email       String
  country     String
  address     String
  city        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  products  Product[]
  OrderItem OrderItem[]

  @@unique([userId])
}

model Product {
  id          String   @id @default(uuid())
  name        String
  images      String[]
  category    String
  description String
  price       Decimal
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  productAssets ProductAsset[]
  orderItems    OrderItem[]
}

model ProductAsset {
  id   String  @id @default(uuid())
  name String?
  url  String
  size Int?

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

enum TRANSACTION_STATUS {
  PENDING
  PAID
  CANCELED
}

model Order {
  id         String             @id @unique
  totalPrice Decimal
  status     TRANSACTION_STATUS
  token      String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderItems OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  createdAt  DateTime @default(now())

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  storeId   String
  store     Store   @relation(fields: [storeId], references: [id])

  @@index([orderId])
  @@index([productId])
}

// model User {
//   id                 String    @id @default(auto()) @map("_id") @db.ObjectId
//   name               String? 
//   image              String? 
//   email              String? @unique
//   emailVerified      DateTime?
//   password           String?
//   isTwoFactorEnabled Boolean @default(false)
//   twoFactorConfirmation TwoFactorConfirmation?
//   createdAt          DateTime @default(now())
//   updatedAt          DateTime @updatedAt

//   favoriteIds       String[]  @db.ObjectId
//   carts             Cart[]    @relation("UserCarts")

//   accounts          Account[]
//   store             Store[]
//   order             Order[]
// }

// model Account {
//   id                 String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId             String  @db.ObjectId
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?  @db.String
//   access_token       String?  @db.String
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?  @db.String
//   session_state      String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model VerficationToken {
//   id                 String  @id @default(auto()) @map("_id") @db.ObjectId                 
//   currentEmail       String
//   newEmail           String?
//   token              String @unique
//   expires            DateTime

//   @@unique([currentEmail, newEmail, token])
// }

// model PasswordResetToken {
//   id                String  @id @default(auto()) @map("_id") @db.ObjectId
//   email             String
//   token             String @unique
//   expires           DateTime

//   @@unique([email, token])
// }

// model TwoFactorToken {
//    id               String  @id @default(auto()) @map("_id") @db.ObjectId
//   email             String
//   token             String @unique
//   expires           DateTime

//   @@unique([email, token])
// }

// model TwoFactorConfirmation {
//   id               String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId           String  @db.ObjectId

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([userId])
// }

// model Store {
//   id          String    @id @default(auto()) @map("_id") @db.ObjectId
//   userId      String    @db.ObjectId
//   image       String?
//   name        String
//   email       String
//   country     String
//   address     String
//   city        String
//   description String
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
//   products    Product[]

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([userId])
// }

// model Product {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   storeId     String   @db.ObjectId
//   name        String
//   image       String[]
//   category    String
//   description String
//   price       Decimal
//   isFeatured  Boolean 
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   store       Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
//   order       Order[]
//   cartItem    CartItem[]
//   productAssets ProductAsset[]
// }

// model ProductAsset {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   name        String?
//   url         String   

//   productId   String   @db.ObjectId
//   product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

//   @@index([productId])
// }

// model Cart {
//   id             String     @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt      DateTime   @default(now())
//   updatedAt      DateTime   @updatedAt

//   user           User?      @relation("UserCarts", fields: [userId], references: [id], onDelete: Cascade)
//   userId         String?    @map("user_id") @db.ObjectId

//   items          CartItem[]
// }

// model CartItem {
//   id             String     @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt      DateTime   @default(now())
//   quantity       Int
//   total          Float

//   product        Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
//   cart           Cart       @relation(fields: [cartId], references: [id], onDelete: Cascade)

//   productId      String     @map("product_id") @db.ObjectId
//   cartId         String     @map("cart_id") @db.ObjectId
// }

// model Order {
//   id            String      @id @default(auto()) @map("_id") @db.ObjectId
//   userId        String      @db.ObjectId
//   recipient     String
//   phone         String
//   address       String
//   postalCode    String
//   payment       String
//   cardNumber    String?
//   productId     String      @db.ObjectId
//   quantity      Int
//   shipment      String
//   totalPrice    Int
//   status        String      @default("process")
//   createdAt     DateTime    @default(now())

//   user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
// }
